---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: windows-pipelines
roleRef:
  kind: ClusterRole
  name: windows-pipelines
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: pipeline
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: windows-pipelines
  namespace: kubevirt-os-images
roleRef:
  kind: ClusterRole
  name: modify-data-object-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: modify-data-object-task
  - kind: ServiceAccount
    name: pipeline
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pipeline
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: windows-pipelines
rules:
  - verbs:
      - create
    apiGroups:
      - ""
    resources:
      - pods
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
    apiGroups:
      - template.openshift.io
    resources:
      - templates
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - '*'
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines/finalizers
  - verbs:
      - create
    apiGroups:
      - template.openshift.io
    resources:
      - processedtemplates
  - verbs:
      - '*'
    apiGroups:
      - ''
    resources:
      - persistentvolumeclaims
  - verbs:
      - '*'
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes
  - verbs:
      - update
    apiGroups:
      - subresources.kubevirt.io
    resources:
      - virtualmachines/start
      - virtualmachines/stop
      - virtualmachines/restart

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-bios-installer
spec:
  params:
    - name: winImageDownloadURL
      description: Download URL to Windows installation ISO (English United States x64 version is needed). You can follow e.g. https://www.microsoft.com/en-us/software-download/windows10ISO to get windows 10 iso.
      type: string
    - name: autounattendConfigMapName
      description: Name of the ConfigMap containing the sysprep configuration files (autounattend.xml, etc.).
      type: string
      default: windows10-bios-autounattend
    - name: virtioContainerDiskName
      description: Reference to the containerdisk containing the virtio-win drivers ISO.
      type: string
      default: quay.io/kubevirt/virtio-container-disk:latest
    - name: sourceTemplateName
      description: Name of the Template which is used to create the installer Template.
      type: string
      default: windows10-desktop-large
    - name: sourceTemplateNamespace
      description: Namespace of the Template which is used to create the installer Template.
      type: string
      default: openshift
    - name: installerTemplateName
      description: Name of the installer Template which is created. A VM created from this template is used to install Windows 10.
      type: string
      default: windows10-desktop-large-installer
    - name: allowReplaceInstallerTemplate
      description: Allow to replace an already existing installer Template.
      type: string
      default: "false"
    - name: baseDvName
      description: Name of the base DataVolume which is created. Pre-installed Windows VMs can be created from this DataVolume.
      type: string
      default: win10
    - name: baseDvNamespace
      description: Namespace of the base DataVolume which is created.
      type: string
      default: kubevirt-os-images
  tasks:
    - name: copy-template
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.installerTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceInstallerTemplate)
      timeout: 10m
      taskRef:
        kind: Task
        name: copy-template
    - name: modify-vm-template
      params:
        - name: templateName
          value: $(tasks.copy-template.results.name)
        - name: templateAnnotations
          value:
            - "openshift.io/display-name: Microsoft Windows bios Installer VM"
            - "description: Template for installing Microsoft Windows."
        - name: deleteDatavolumeTemplate
          value: "true"
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-installcdrom"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "7Gi"
                      }
                    }
                  },
                  "source": {
                    "http": {
                      "url": "$(params.winImageDownloadURL)"
                    }
                  }
                }
              }
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-rootdisk"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "20Gi"
                      }
                    }
                  },
                  "source": {
                    "blank": {}
                  }
                }
              }
        - name: deleteDisks
          value: "true"
        - name: disks
          value:
            - '{"name": "installcdrom", "cdrom": {"bus": "sata"}, "bootOrder": 1}'
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}, "bootOrder": 2}'
            - '{"name": "virtiocontainerdisk", "cdrom": {"bus": "sata"}}'
            - '{"name": "sysprep", "cdrom": {"bus": "sata"}}'
        - name: deleteVolumes
          value: "true"
        - name: volumes
          value:
            - '{"name": "installcdrom", "dataVolume": {"name": "${NAME}-installcdrom"}}'
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}-rootdisk"}}'
            - '{"name": "virtiocontainerdisk", "containerDisk": {"image": "$(params.virtioContainerDiskName)"}}'
            - '{"name": "sysprep", "sysprep": {"configMap": {"name": "$(params.autounattendConfigMapName)"}}}'
        - name: deleteTemplateParameters
          value: "true"
        - name: templateParameters
          value:
            - '{"name": "NAME", "description": "VM name", "generate": "expression", "from": "windows-[a-z0-9]{6}"}'
      runAfter:
        - copy-template
      timeout: 10m
      taskRef:
        kind: Task
        name: modify-vm-template
    - name: create-vm-from-template
      params:
        - name: templateName
          value: $(tasks.modify-vm-template.results.name)
        - name: runStrategy
          value: RerunOnFailure
        - name: startVM
          value: "true"
      runAfter:
        - modify-vm-template
      taskRef:
        kind: Task
        name: create-vm-from-template
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm-from-template.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm-from-template
      timeout: 2h
      taskRef:
        kind: Task
        name: wait-for-vmi-status
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              name: $(params.baseDvName)
              namespace: $(params.baseDvNamespace)
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
            spec:
              storage: {}
              source:
                pvc:
                  name: $(tasks.create-vm-from-template.results.name)-rootdisk
                  namespace: $(tasks.create-vm-from-template.results.namespace)
        - name: waitForSuccess
          value: "true"
        - name: allowReplace
          value: "true"
      runAfter:
        - wait-for-vmi-status
      timeout: 1h
      taskRef:
        kind: Task
        name: modify-data-object
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-template.results.name)
        - name: delete
          value: "true"
      timeout: 10m
      taskRef:
        kind: Task
        name: cleanup-vm
    - name: delete-template
      params:
        - name: templateName
          value: $(params.installerTemplateName)
        - name: templateNamespace
          value: $(tasks.modify-vm-template.results.namespace)
        - name: deleteTemplate
          value: "true"
      taskRef:
        kind: Task
        name: modify-vm-template
  results:
    - name: installerTemplateName
      description: Name of the created installer Template
      value: $(tasks.copy-template.results.name)
    - name: installerTemplateNamespace
      description: Namespace of the created installer Template
      value: $(tasks.copy-template.results.namespace)
    - name: baseDvName
      description: Name of the created base DataVolume
      value: $(tasks.create-base-dv.results.name)
    - name: baseDvNamespace
      description: Namespace of the created base DataVolume
      value: $(tasks.create-base-dv.results.namespace)
