---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-customize
  annotations:
    description: windows-customize pipeline provides functionality for windows VMs to e.g. install sql server, or install VS Code into windows VM. This pipeline can be reused for customizing Windows 10 and 11.
spec:
  params:
    - name: sourceTemplateName
      description: Name of the Template which is used to customize Windows and create a golden Template. The default boot source of this template needs to be available.
      type: string
      default: windows10-desktop-large
    - name: sourceTemplateNamespace
      description: Namespace of the Template which is used to customize Windows and create a golden Template. The default boot source of this template needs to be available.
      type: string
      default: openshift
    - name: customizeConfigMapName
      description: Name of the ConfigMap containing the customization and sysprep configuration files (unattend.xml, etc.). For example windows10-sqlserver or windows11-vs-code. It is possible to provide customize ConfigMaps created by the user too.
      type: string
      default: windows-sqlserver
    - name: customizeTemplateName
      description: Name of the customize Template which is created. A VM created from this template is used to customize Windows.
      type: string
      default: windows10-desktop-large-customize-sqlserver
    - name: allowReplaceCustomizationTemplate
      description: Allow to replace an already existing customize Template.
      type: string
      default: "false"
    - name: goldenTemplateName
      description: Name of the golden Template which is created. Pre-installed Windows VMs can be created from this template.
      type: string
      default: windows10-desktop-large-golden-sqlserver
    - name: allowReplaceGoldenTemplate
      description: Allow to replace an already existing golden Template.
      type: string
      default: "false"
  tasks:
    - name: copy-template-customize
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.customizeTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceCustomizationTemplate)
      timeout: 10m
      taskRef:
        kind: ClusterTask
        name: copy-template
    - name: modify-vm-template-customize
      params:
        - name: templateName
          value: $(tasks.copy-template-customize.results.name)
        - name: templateAnnotations
          value:
            - "openshift.io/display-name: Microsoft Windows Customize VM"
            - "description: Template for customizing Microsoft Windows."
        - name: deleteDatavolumeTemplate
          value: "true"
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}"
                },
                "spec": {
                  "storage": {},
                  "sourceRef": {
                    "kind": "DataSource",
                    "name": "${DATA_SOURCE_NAME}",
                    "namespace": "${DATA_SOURCE_NAMESPACE}"
                  }
                }
              }
        - name: disks
          value:
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}}'
            - '{"name": "sysprep", "cdrom": {"bus": "sata"}}'
        - name: volumes
          value:
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}"}}'
            - '{"name": "sysprep", "sysprep": {"configMap": {"name": "$(params.customizeConfigMapName)"}}}'
      runAfter:
        - copy-template-customize
      timeout: 10m
      taskRef:
        kind: ClusterTask
        name: modify-vm-template
    - name: create-vm-from-template
      params:
        - name: templateName
          value: $(tasks.modify-vm-template-customize.results.name)
        - name: runStrategy
          value: RerunOnFailure
        - name: startVM
          value: "true"
      runAfter:
        - modify-vm-template-customize
      timeout: 10m
      taskRef:
        kind: ClusterTask
        name: create-vm-from-template
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm-from-template.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm-from-template
      timeout: 2h
      taskRef:
        kind: ClusterTask
        name: wait-for-vmi-status
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              generateName: windows-base-
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: \"true\"
                cdi.kubevirt.io/storage.deleteAfterCompletion: "false"
            spec:
              storage:
                resources:
                  requests:
                    storage: 20Gi
              source:
                pvc:
                  name: $(tasks.create-vm-from-template.results.name)
                  namespace: $(tasks.create-vm-from-template.results.namespace)
        - name: waitForSuccess
          value: "true"
      runAfter:
        - wait-for-vmi-status
      timeout: 1h
      taskRef:
        kind: ClusterTask
        name: modify-data-object
    - name: copy-template-golden
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.goldenTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceGoldenTemplate)
      runAfter:
        - create-base-dv
      timeout: 30m
      taskRef:
        kind: ClusterTask
        name: copy-template
    - name: modify-vm-template-golden
      params:
        - name: templateName
          value: $(tasks.copy-template-golden.results.name)
        - name: templateAnnotations
          value:
            - "openshift.io/display-name: Microsoft Windows Customized VM Golden"
            - "description: Template for creating customized Microsoft Windows VMs."
        - name: deleteDatavolumeTemplate
          value: "true"
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "20Gi"
                      }
                    }
                  },
                  "source": {
                    "pvc": {
                      "name": "$(tasks.create-base-dv.results.name)",
                      "namespace": "$(tasks.create-base-dv.results.namespace)"
                    }
                  }
                }
              }
        - name: deleteDisks
          value: "true"
        - name: disks
          value:
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}}'
        - name: deleteVolumes
          value: "true"
        - name: volumes
          value:
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}"}}'
        - name: deleteTemplateParameters
          value: "true"
        - name: templateParameters
          value:
            - '{"name": "NAME", "description": "VM name", "generate": "expression", "from": "windows-[a-z0-9]{6}"}'
      runAfter:
        - copy-template-golden
      timeout: 10m
      taskRef:
        kind: ClusterTask
        name: modify-vm-template
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-template.results.name)
        - name: delete
          value: "true"
      timeout: 10m
      taskRef:
        kind: ClusterTask
        name: cleanup-vm
    - name: delete-template-customize
      params:
        - name: templateName
          value: $(params.customizeTemplateName)
        - name: templateNamespace
          value: $(tasks.copy-template-customize.results.namespace)
        - name: deleteTemplate
          value: "true"
      taskRef:
        kind: ClusterTask
        name: modify-vm-template
  results:
    - name: baseDvName
      description: Name of the created base DataVolume
      value: $(tasks.create-base-dv.results.name)
    - name: baseDvNamespace
      description: Namespace of the created base DataVolume
      value: $(tasks.create-base-dv.results.namespace)
    - name: goldenTemplateName
      description: Name of the created golden Template
      value: $(tasks.copy-template-golden.results.name)
    - name: goldenTemplateNamespace
      description: Namespace of the created golden Template
      value: $(tasks.copy-template-golden.results.namespace)
