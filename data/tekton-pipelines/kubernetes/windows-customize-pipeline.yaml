---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-customize
  annotations:
    description: windows-customize pipeline provides functionality for windows VMs to e.g. install sql server, or install VS Code into windows VM. This pipeline can be reused for customizing Windows 10 and 11.
spec:
  params:
    - name: sourceDataVolumeName
      description: Name of the DataVolume which is used to customize Windows 10 and create a new base DataVolume.
      type: string
    - name: sourceDataVolumeNamespace
      description: Namespace of the DataVolume which is used to customize Windows 10 and create a new base DataVolume.
      type: string
    - name: customizeConfigMapName
      description: Name of the ConfigMap containing the customization and sysprep configuration files (unattend.xml, etc.). For example windows10-sqlserver or windows11-vs-code. It is possible to provide customize ConfigMaps created by the user too.
      type: string
      default: windows10-vs-code
  tasks:
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              generateName: windows-base-
            spec:
              storage: {}
              source:
                pvc:
                  name: $(params.sourceDataVolumeName)
                  namespace: $(params.sourceDataVolumeNamespace)
      timeout: 1h
      taskRef:
        kind: ClusterTask
        name: modify-data-object
    - name: create-vm-from-manifest
      params:
        - name: manifest
          value: |
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              generateName: windows-customize-
              labels:
                app: windows-customize
            spec:
              running: false
              template:
                metadata:
                  annotations:
                    vm.kubevirt.io/os: windows
                  labels:
                    kubevirt.io/domain: windows-customize
                spec:
                  domain:
                    clock:
                      utc: {}
                      timer:
                        hpet:
                          present: false
                        pit:
                          tickPolicy: delay
                        rtc:
                          tickPolicy: catchup
                        hyperv: {}
                    cpu:
                      sockets: 2
                      cores: 1
                      threads: 1
                    resources:
                      requests:
                        memory: 8Gi
                    features:
                      acpi: {}
                      apic: {}
                      hyperv:
                        relaxed: {}
                        vapic: {}
                        vpindex: {}
                        spinlocks:
                          spinlocks: 8191
                        synic: {}
                        synictimer:
                          direct: {}
                        tlbflush: {}
                        frequencies: {}
                        reenlightenment: {}
                        ipi: {}
                        runtime: {}
                        reset: {}
                    devices:
                      disks:
                        - name: rootdisk
                          disk:
                            bus: virtio
                          bootOrder: 2
                        - name: sysprep
                          cdrom:
                            bus: sata
                      interfaces:
                        - masquerade: {}
                          model: e1000e
                          name: default
                      inputs:
                        - type: tablet
                          bus: usb
                          name: tablet
                  terminationGracePeriodSeconds: 3600
                  volumes:
                    - name: rootdisk
                    - name: sysprep
                      sysprep:
                        configMap:
                          name: $(params.customizeConfigMapName)
                  networks:
                    - name: default
                      pod: {}
        - name: dataVolumes
          value:
            - "rootdisk: $(tasks.create-base-dv.results.name)"
        - name: runStrategy
          value: RerunOnFailure
        - name: startVM
          value: "true"
      runAfter:
        - create-base-dv
      timeout: 10m
      taskRef:
        kind: ClusterTask
        name: create-vm-from-manifest
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm-from-manifest.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm-from-manifest
      timeout: 2h
      taskRef:
        kind: ClusterTask
        name: wait-for-vmi-status
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-manifest.results.name)
        - name: delete
          value: "true"
      timeout: 10m
      taskRef:
        kind: ClusterTask
        name: cleanup-vm
  results:
    - name: baseDvName
      description: Name of the created base DataVolume
      value: $(tasks.create-base-dv.results.name)
    - name: baseDvNamespace
      description: Namespace of the created base DataVolume
      value: $(tasks.create-base-dv.results.namespace)
